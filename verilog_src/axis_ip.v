// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_ip,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.278000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=135,HLS_SYN_LUT=257,HLS_VERSION=2018_2}" *)

module axis_ip_top (
  input         clk,
  input         reset,
  input  [31:0] din,
  input         vld_in,
  output        rdy_in,
  output [31:0] dout,
  output        vld_out,
  input         rdy_out,
  output [3:0]  keep_out,
  output        last_out
);


axis_ip i(
    .ap_clk(clk)
  , .ap_rst(reset)
  , .ap_start(1'b1)
  , .ap_done()
  , .ap_idle()
  , .ap_ready()
  , .Input_1_V_V(din)
  , .Input_1_V_V_ap_vld(vld_in)
  , .Input_1_V_V_ap_ack(rdy_in)
  , .Output_1_V_V({last_out, keep_out, dout})
  , .Output_1_V_V_ap_vld(vld_out)
  , .Output_1_V_V_ap_ack(rdy_out)
);



endmodule


module axis_ip (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [36:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg[36:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_3_fu_99_p2;
reg    Output_1_V_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_3_reg_134;
reg   [30:0] i_reg_63;
wire   [31:0] tmp_1_fu_83_p2;
reg   [31:0] tmp_1_reg_124;
reg    ap_block_state1;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
wire   [31:0] tmp_2_fu_89_p2;
reg   [31:0] tmp_2_reg_129;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_1_fu_104_p2;
wire   [0:0] tmp_4_fu_110_p2;
reg   [0:0] tmp_4_reg_143;
reg   [31:0] tmp_V_1_reg_148;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [36:0] p_Result_s_fu_74_p3;
wire   [36:0] p_Result_1_fu_115_p4;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
wire   [31:0] i_cast_fu_95_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_134 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((tmp_3_reg_134 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == Output_1_V_V_ap_ack) & (1'b0 == ap_block_pp0_stage0_01001)) | (~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_99_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_63 <= i_1_fu_104_p2;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_63 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_124 <= tmp_1_fu_83_p2;
        tmp_2_reg_129 <= tmp_2_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_134 <= tmp_3_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_143 <= tmp_4_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_99_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_1_reg_148 <= Input_1_V_V;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_99_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_3_fu_99_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_reg_134 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        Output_1_V_V = p_Result_1_fu_115_p4;
    end else if ((~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V = p_Result_s_fu_74_p3;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_134 == 1'd1) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)) | (~((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_134 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_3_fu_99_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_3_fu_99_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_3_fu_99_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_3_fu_99_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((tmp_3_fu_99_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((tmp_3_fu_99_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_3_fu_99_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_3_reg_134 == 1'd1) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_1_fu_104_p2 = (i_reg_63 + 31'd1);

assign i_cast_fu_95_p1 = i_reg_63;

assign p_Result_1_fu_115_p4 = {{{tmp_4_reg_143}, {4'd15}}, {tmp_V_1_reg_148}};

assign p_Result_s_fu_74_p3 = {{5'd15}, {Input_1_V_V}};

assign tmp_1_fu_83_p2 = ($signed(Input_1_V_V) + $signed(32'd4294967295));

assign tmp_2_fu_89_p2 = ($signed(Input_1_V_V) + $signed(32'd4294967294));

assign tmp_3_fu_99_p2 = (($signed(i_cast_fu_95_p1) < $signed(tmp_1_reg_124)) ? 1'b1 : 1'b0);

assign tmp_4_fu_110_p2 = ((i_cast_fu_95_p1 == tmp_2_reg_129) ? 1'b1 : 1'b0);

endmodule //axis_ip
